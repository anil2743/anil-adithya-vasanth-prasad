name: CI/CD Deploy Java App to Tomcat10 on EC2

# Trigger deployment on push to staging or main, and on PR to staging
on:
  push:
    branches:
      - staging
      - master
  pull_request:
    branches:
      - staging

jobs:
  build:
    name: Build WAR
    runs-on: ubuntu-latest

    steps:
      # 1 Checkout your repo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2 Setup Java 17
      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      # 3 Build WAR file
      - name: Build WAR file
        run: mvn clean package -DskipTests

      # 4 Verify WAR file exists
      - name: Verify WAR file
        run: |
          echo "=== Listing target directory ==="
          ls -la target/
          
          echo "=== Checking for WAR files ==="
          if ls target/*.war 1> /dev/null 2>&1; then
            echo "Found WAR files:"
            ls -la target/*.war
            WAR_FILE=$(ls target/*.war | head -1)
            echo "WAR file: $WAR_FILE"
            
            # Verify it's a file, not directory
            if [ -d "$WAR_FILE" ]; then
              echo "ERROR: $WAR_FILE is a directory, not a file!"
              exit 1
            fi
            
            # Copy to a known location with correct name
            cp "$WAR_FILE" ./app.war
            echo "WAR_FILE copied to ./app.war"
          else
            echo "ERROR: No WAR files found in target directory"
            exit 1
          fi

      # 5 Upload WAR artifact for deployment jobs
      - name: Upload WAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: war-file
          path: ./app.war

      # 6 List WAR contents for debugging
      - name: List WAR contents
        run: |
          echo "=== Listing WAR file contents ==="
          jar tf ./app.war

  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/staging'
    
    steps:
      # 1 Download WAR artifact
      - name: Download WAR artifact
        uses: actions/download-artifact@v4
        with:
          name: war-file
          
      # 2 Verify artifact was downloaded
      - name: Verify artifact
        run: |
          echo "=== Checking current directory ==="
          ls -la
          echo "=== Checking if app.war exists ==="
          if [ -f "./app.war" ]; then
            echo "✓ app.war found"
            ls -la ./app.war
          else
            echo "✗ app.war not found"
            exit 1
          fi

      # 3 Create SSH key file
      - name: Create SSH key file
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # 4 Test SSH connection
      - name: Test SSH connection
        run: |
          echo "=== Testing SSH connection ==="
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"

      # 5 Deploy to Staging using direct file transfer
      - name: Deploy to Staging
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "=== Starting Staging Deployment ==="
            
            # Clean up any existing staging artifacts
            echo "1. Cleaning up staging artifacts..."
            sudo rm -rf /var/lib/tomcat10/webapps/staging*
            
            # Set permissions for webapps directory
            echo "2. Setting permissions..."
            sudo chmod 777 /var/lib/tomcat10/webapps
            
            # Create a temporary file to receive the WAR content
            echo "3. Creating temporary file..."
            touch /tmp/staging.war
            sudo chmod 666 /tmp/staging.war
            
            # Deploy to Staging
            echo "4. Deploying to Staging..."
            cat > /tmp/staging.war << 'WAR_EOF'
            $(cat ./app.war | base64 -w 0)
            WAR_EOF
            
            # Decode the base64 content
            echo "5. Decoding WAR file..."
            base64 -d /tmp/staging.war > /tmp/staging_decoded.war
            
            # Move to webapps directory
            echo "6. Moving WAR file to webapps..."
            sudo mv /tmp/staging_decoded.war /var/lib/tomcat10/webapps/staging.war
            
            # Verify the file was created
            echo "7. Verifying WAR file..."
            if [ -f "/var/lib/tomcat10/webapps/staging.war" ]; then
              echo "✓ staging.war created successfully"
              ls -la /var/lib/tomcat10/webapps/staging.war
            else
              echo "✗ staging.war not found after creation"
              exit 1
            fi
            
            # Set permissions for WAR file
            echo "8. Setting WAR file permissions..."
            sudo chown tomcat:tomcat /var/lib/tomcat10/webapps/staging.war
            sudo chmod 644 /var/lib/tomcat10/webapps/staging.war
            
            # Clean up temporary files
            echo "9. Cleaning up temporary files..."
            rm -f /tmp/staging.war /tmp/staging_decoded.war
            
            # Restart Tomcat
            echo "10. Restarting Tomcat..."
            sudo systemctl restart tomcat10
            
            # Wait for Tomcat to start and deploy
            echo "11. Waiting for Tomcat to start and deploy..."
            sleep 30
            
            # Verify deployment
            echo "12. Verifying deployment..."
            ls -la /var/lib/tomcat10/webapps/
            
            # Check if staging directory was created by Tomcat
            if [ -d "/var/lib/tomcat10/webapps/staging" ]; then
              echo "✓ Staging directory created by Tomcat"
              ls -la /var/lib/tomcat10/webapps/staging/
            else
              echo "✗ Staging directory not found"
            fi
            
            # Check Tomcat status
            echo "13. Checking Tomcat status..."
            sudo systemctl status tomcat10 --no-pager
            
            echo "=== Staging Deployment Completed ==="

  deploy-production:
    name: Deploy to Production
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
      # 1 Download WAR artifact
      - name: Download WAR artifact
        uses: actions/download-artifact@v4
        with:
          name: war-file
          
      # 2 Verify artifact was downloaded
      - name: Verify artifact
        run: |
          echo "=== Checking current directory ==="
          ls -la
          echo "=== Checking if app.war exists ==="
          if [ -f "./app.war" ]; then
            echo "✓ app.war found"
            ls -la ./app.war
          else
            echo "✗ app.war not found"
            exit 1
          fi

      # 3 Create SSH key file
      - name: Create SSH key file
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # 4 Test SSH connection
      - name: Test SSH connection
        run: |
          echo "=== Testing SSH connection ==="
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"

      # 5 Deploy to Production using direct file transfer
      - name: Deploy to Production
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "=== Starting Production Deployment ==="
            
            # Clean up any existing production artifacts
            echo "1. Cleaning up production artifacts..."
            sudo rm -rf /var/lib/tomcat10/webapps/ROOT*
            
            # Set permissions for webapps directory
            echo "2. Setting permissions..."
            sudo chmod 777 /var/lib/tomcat10/webapps
            
            # Create a temporary file to receive the WAR content
            echo "3. Creating temporary file..."
            touch /tmp/ROOT.war
            sudo chmod 666 /tmp/ROOT.war
            
            # Deploy to Production
            echo "4. Deploying to Production..."
            cat > /tmp/ROOT.war << 'WAR_EOF'
            $(cat ./app.war | base64 -w 0)
            WAR_EOF
            
            # Decode the base64 content
            echo "5. Decoding WAR file..."
            base64 -d /tmp/ROOT.war > /tmp/ROOT_decoded.war
            
            # Move to webapps directory
            echo "6. Moving WAR file to webapps..."
            sudo mv /tmp/ROOT_decoded.war /var/lib/tomcat10/webapps/ROOT.war
            
            # Verify the file was created
            echo "7. Verifying WAR file..."
            if [ -f "/var/lib/tomcat10/webapps/ROOT.war" ]; then
              echo "✓ ROOT.war created successfully"
              ls -la /var/lib/tomcat10/webapps/ROOT.war
            else
              echo "✗ ROOT.war not found after creation"
              exit 1
            fi
            
            # Set permissions for WAR file
            echo "8. Setting WAR file permissions..."
            sudo chown tomcat:tomcat /var/lib/tomcat10/webapps/ROOT.war
            sudo chmod 644 /var/lib/tomcat10/webapps/ROOT.war
            
            # Clean up temporary files
            echo "9. Cleaning up temporary files..."
            rm -f /tmp/ROOT.war /tmp/ROOT_decoded.war
            
            # Restart Tomcat
            echo "10. Restarting Tomcat..."
            sudo systemctl restart tomcat10
            
            # Wait for Tomcat to start and deploy
            echo "11. Waiting for Tomcat to start and deploy..."
            sleep 30
            
            # Verify deployment
            echo "12. Verifying deployment..."
            ls -la /var/lib/tomcat10/webapps/
            
            # Check if ROOT directory was created by Tomcat
            if [ -d "/var/lib/tomcat10/webapps/ROOT" ]; then
              echo "✓ ROOT directory created by Tomcat"
              ls -la /var/lib/tomcat10/webapps/ROOT/
            else
              echo "✗ ROOT directory not found"
            fi
            
            # Check Tomcat status
            echo "13. Checking Tomcat status..."
            sudo systemctl status tomcat10 --no-pager
            
            echo "=== Production Deployment Completed ==="
